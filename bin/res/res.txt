package com.chanpay.cloud.app.api.controller.hsy.v2;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSONObject;
import com.chanpay.cloud.app.api.Config;
import com.chanpay.cloud.app.api.client.WalletFeignClient;
import com.chanpay.cloud.app.api.client.haoshouyin.AppHsyMerchantClient;
import com.chanpay.cloud.app.api.client.haoshouyin.MerchQrCodePayFeignClient;
import com.chanpay.cloud.app.api.controller.qkt.v3.QktTokenAndSignUtil;
import com.chanpay.cloud.app.api.permission.client.PermissionFeignClient;
import com.chanpay.cloud.app.api.redis.service.IKeyService;
import com.chanpay.cloud.app.api.util.ExceptionLogUtil;
import com.chanpay.cloud.app.api.util.HsyV2Util;
import com.chanpay.cloud.app.api.util.QktV3Util;
import com.chanpay.cloud.app.api.vo.WithdrawDepositFeeVo;
import com.chanpay.cloud.app.api.vo.haoshouyin.HsyMerchantWithdrawRecordVo;
import com.chanpay.cloud.app.api.vo.haoshouyin.MerchWalletFlowVo;
import com.chanpay.cloud.app.api.vo.haoshouyin.MerchWalletVo;
import com.chanpay.cloud.app.api.vo.haoshouyin.MerchWalletWithdrawLimitVo;
import com.chanpay.cloud.app.api.vo.haoshouyin.MerchWalletWithdrawRecordVo;
import com.chanpay.cloud.app.api.vo.qkt.ReqParamsDto;
import com.chanpay.cloud.common.entity.AppBaseResMessage;
import com.chanpay.cloud.common.entity.BaseResMessage;
import com.chanpay.cloud.common.web.util.WebParamUtils;
import com.chanpay.cloud.facade.constants.ServiceConstants;
import com.chanpay.cloud.facade.dto.account.AccountWalletDto;
import com.chanpay.cloud.facade.dto.account.WalletFlowDto;
import com.chanpay.cloud.facade.dto.account.WalletWithdrawDepositLimitDto;
import com.chanpay.cloud.facade.dto.account.WithdrawDepositFeeDto;
import com.chanpay.cloud.facade.dto.account.WithdrawDepositReqDto;
import com.chanpay.cloud.facade.dto.api.newtrans.QkQueryMerWithdrawRecordReqDto;
import com.chanpay.cloud.facade.dto.api.newtrans.QkQueryMerWithdrawRecordResDto;
import com.chanpay.cloud.facade.dto.api.newtrans.QkWithdrawHsyReqDto;
import com.chanpay.cloud.facade.dto.api.newtrans.QkWithdrawResDto;
import com.chanpay.cloud.facade.dto.haoshouyin.HsyMerchCacheSessionInfoDto;
import com.chanpay.cloud.facade.dto.permission.DeviceDto;
import com.chanpay.cloud.facade.enums.account.CheckStatus;
import com.chanpay.cloud.facade.enums.account.WalletType;
import com.chanpay.cloud.facade.enums.app.ApplicationType;
import com.chanpay.cloud.facade.enums.base.KeyBusinessType;
import com.chanpay.cloud.facade.enums.base.KeyEncryptionType;
import com.chanpay.cloud.facade.enums.common.YesOrNoStatus;
import com.chanpay.cloud.facade.enums.quickpay.QuickPayMessageCode;
import com.chanpay.cloud.facade.exception.BaseCoreException;
import com.chanpay.cloud.facade.exception.enums.ApiExceptionEnums;
import com.github.pagehelper.PageInfo;

/**
 * 好收银账户钱包
 * 
 * @author tinn
 *
 */
@RestController
public class MerchWalletRefController {

	/**
	 * 3.25、钱包余额查询接口
	 * 
	 * @param params
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/queryAccountWallet", method = RequestMethod.POST)
	public @ResponseBody AppBaseResMessage queryAccountWallet(@RequestBody ReqParamsDto reqDto,
			HttpServletRequest request, HttpServletResponse response, ModelMap model) throws BaseCoreException {
		LOGGER.info("AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/queryAccountWallet request Start！ ");
		LOGGER.info("base request params: deviceNo={},sessionId={}. ", reqDto.getDeviceNo(), reqDto.getSessionId());

		AppBaseResMessage resMsg = null;
		try {
			// 1、校验会话SessionId
			if (StringUtils.isEmpty(reqDto.getSessionId())) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getKey(),
						ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			BaseResMessage<HsyMerchCacheSessionInfoDto> sessionInfo = appHsyMerchantClient
					.getHsyMerchSession(reqDto.getSessionId());

			if (sessionInfo.getData() == null) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
						ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 2、通过设备号查询公私钥
			BaseResMessage<DeviceDto> resDeviceDto = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex());
			DeviceDto deviceDto = resDeviceDto.getData();
			if (null == deviceDto) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),
						ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 3、校验用户令牌和签名
			resMsg = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, deviceDto);
			if(!StringUtils.equals(resMsg.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			} 
			// 获取私钥
			String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
					KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// 4、解密
			AppBaseResMessage encrpyStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);

			if (!StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),
						ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 解密成功
			if (StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				// 根据sessionId获得好收银商户账户UUID

				HsyMerchCacheSessionInfoDto merchCacheSessionInfoDto = sessionInfo.getData();
				Integer checkStatus = merchCacheSessionInfoDto.getQkUserDto().getCheckStatus();
				if (checkStatus == CheckStatus.CHECK_NOT_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (checkStatus == CheckStatus.CHECK_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer isNeedInfoSupply = merchCacheSessionInfoDto.getQkUserDto().getQkUserStatusDto()
						.getIsNeedInfoSupply();
				if (YesOrNoStatus.YES.getIndex() == isNeedInfoSupply) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getKey(),
							ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				UUID uuid = merchCacheSessionInfoDto.getQkUserDto().getAccountUuid();
				if (null == uuid) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "账户不存在！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String accUuid = uuid.toString();

				LOGGER.info("wallet/queryAccountWallet request params accUuid：{}." + accUuid);
				BaseResMessage<AccountWalletDto> result = walletFeignClient.getAccountWalletBalance(accUuid, "");

				// 8、验证相应结果
				String code = result.getCode();
				String message = result.getMessage();
				if (ServiceConstants.RES_SUCCESS_CODE.equals(code)) {
					AccountWalletDto accountWalletDto = result.getData();
					BigDecimal posWalletBalance = BigDecimal.ZERO; // 刷卡钱包余额
					posWalletBalance = posWalletBalance.add(accountWalletDto.getPosD0Wallet())
							.add(accountWalletDto.getPosD0PreWallet())
							.add(accountWalletDto.getPosD0BusinessFrozenPreWallet())
							.add(accountWalletDto.getPosD0BusinessFrozenWallet()).add(accountWalletDto.getPosT1Wallet())
							.add(accountWalletDto.getPosT1BusinessFrozenWallet())
							.add(accountWalletDto.getPosRiskControlFrozenWallet());

					BigDecimal qrCodeWalletBalance = BigDecimal.ZERO; // 二维码钱包余额
					qrCodeWalletBalance = qrCodeWalletBalance.add(accountWalletDto.getQrCodeD0Wallet())
							.add(accountWalletDto.getQrCodeD0PreWallet())
							.add(accountWalletDto.getQrCodeD0BusinessFrozenPreWallet())
							.add(accountWalletDto.getQrCodeD0BusinessFrozenWallet())
							.add(accountWalletDto.getQrCodeT1Wallet())
							.add(accountWalletDto.getQrCodeT1BusinessFrozenWallet())
							.add(accountWalletDto.getQrCodeRiskControlFrozenWallet());

					BigDecimal quickPayWalletBalance = BigDecimal.ZERO; // 快捷支付钱包余额
					quickPayWalletBalance = quickPayWalletBalance.add(accountWalletDto.getQuickPayD0Wallet())
							.add(accountWalletDto.getQuickPayD0BusinessFrozenWallet())
							.add(accountWalletDto.getQuickPayT1Wallet())
							.add(accountWalletDto.getQuickPayT1BusinessFrozenWallet())
							.add(accountWalletDto.getQuickPayWalletAccountFrozenWallet());

					MerchWalletVo walletVo = new MerchWalletVo();
					walletVo.setWalletTotalAmount(
							(posWalletBalance.add(qrCodeWalletBalance).add(quickPayWalletBalance)).toString());
					walletVo.setPosT1WalletWithdrawBalance(accountWalletDto.getPosT1Wallet().toString());
					walletVo.setPosD0WalletWithdrawBalance(accountWalletDto.getPosD0Wallet().toString());
					walletVo.setQrCodeT1WalletWithdrawBalance(accountWalletDto.getQrCodeT1Wallet().toString());
					walletVo.setQrCodeD0WalletWithdrawBalance(accountWalletDto.getQrCodeD0Wallet().toString());
					walletVo.setQuickT1WalletWithdrawBalance(accountWalletDto.getQuickPayT1Wallet().toString());
					walletVo.setQuickD0WalletWithdrawBalance(accountWalletDto.getQuickPayD0Wallet().toString());
					
					LOGGER.info("wallet/queryAccountWallet result data:" + JSONObject.toJSONString(walletVo));
					// 9、进行数据加密
					String cipher = QktV3Util.encrypt(deviceDto.getClientPublicKey(), walletVo);
					String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, message, cipher,
							getSignKey());

					resMsg = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE, message, cipher, signStr);
				} else {
					resMsg = new AppBaseResMessage(code, message);
					QktV3Util.signResMsg(resMsg, getSignKey());
				}
			} else {
				// 验签失败
				resMsg = new AppBaseResMessage(encrpyStr.getCode(), encrpyStr.getMessage());
				QktV3Util.signResMsg(resMsg, getSignKey());
			}
			return resMsg;
		} catch (Exception e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE, ServiceConstants.EXCEPTION_RES_MESSAGE);
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} finally {
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/queryAccountWallet response code:{},message:{}",
					resMsg.getCode(), resMsg.getMessage());
		}
	}

	/**
	 * 3.26、钱包余额提现接口
	 * 
	 * @param params
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/withdrawDeposit", method = RequestMethod.POST)
	public AppBaseResMessage withdrawDeposit(@RequestBody ReqParamsDto reqDto, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) throws BaseCoreException {
		LOGGER.info("AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/withdrawDeposit request Start！ ");
		LOGGER.info("base request params: deviceNo={} , sessionId={}", reqDto.getDeviceNo(), reqDto.getSessionId());
		AppBaseResMessage resMsg = null;

		try {
			// 1、校验会话SessionId
			if (StringUtils.isEmpty(reqDto.getSessionId())) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getKey(),
						ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			BaseResMessage<HsyMerchCacheSessionInfoDto> sessionInfo = appHsyMerchantClient
					.getHsyMerchSession(reqDto.getSessionId());

			if (sessionInfo.getData() == null) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
						ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 2、通过设备号查询公私钥
			BaseResMessage<DeviceDto> resDeviceDto = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex());
			DeviceDto deviceDto = resDeviceDto.getData();
			if (null == deviceDto) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),
						ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 3、校验用户令牌和签名
			resMsg = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, deviceDto);
			if(!StringUtils.equals(resMsg.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			} 
			// 获取私钥
			String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
					KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// 4、解密
			AppBaseResMessage encrpyStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);

			if (!StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),
						ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 解密成功
			if (StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				// 5、参数获取
				JSONObject qtkReqDto = null;
				try {
					qtkReqDto = JSONObject.parseObject(encrpyStr.getData());
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getKey(),
							ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer walletType = WebParamUtils.getIntegerValue(qtkReqDto.get("walletType"));
				String amount = QktV3Util.trimString(WebParamUtils.getStringValue(qtkReqDto.get("amount")));
				Long wdAmt = null;

				if (null == walletType || (WalletType.POS_D0_WALLET.getIndex() != walletType
						&& WalletType.POS_T1_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_D0_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_T1_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_D0_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_T1_WALLET.getIndex() != walletType)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "钱包类型填写有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (StringUtils.isBlank(amount)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额为空！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				try {
					int index = amount.indexOf(".");
					if (index <= 0 || amount.substring(index + 1).length() != 2) {
						resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额有误！");
						QktV3Util.signResMsg(resMsg, getSignKey());
						return resMsg;
					}
					BigDecimal wdAmount = new BigDecimal(amount);
					wdAmt = wdAmount.multiply(new BigDecimal(100)).longValue();
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				HsyMerchCacheSessionInfoDto merchCacheSessionInfoDto = sessionInfo.getData();
				Integer checkStatus = merchCacheSessionInfoDto.getQkUserDto().getCheckStatus();
				if (checkStatus == CheckStatus.CHECK_NOT_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (checkStatus == CheckStatus.CHECK_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer isNeedInfoSupply = merchCacheSessionInfoDto.getQkUserDto().getQkUserStatusDto()
						.getIsNeedInfoSupply();
				if (YesOrNoStatus.YES.getIndex() == isNeedInfoSupply) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getKey(),
							ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String spCode = merchCacheSessionInfoDto.getQkUserDto().getQkServerProviderUserCode();
				String merchantCode = merchCacheSessionInfoDto.getQkUserDto().getMerchantNo();
				UUID uuid = merchCacheSessionInfoDto.getQkUserDto().getAccountUuid();
				if (null == uuid) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "账户不存在！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				// 构建请求参数
				QkWithdrawHsyReqDto withdrawDepositReqDto = new QkWithdrawHsyReqDto();
				withdrawDepositReqDto.setSpCode(spCode);
				withdrawDepositReqDto.setMerchantCode(merchantCode);
				withdrawDepositReqDto.setReqFlowNo(createReqFlow(merchantCode));
				withdrawDepositReqDto.setWalletType(walletType);
				withdrawDepositReqDto.setAmount(wdAmt);

				LOGGER.info("wallet/withdrawDeposit request params withdrawDepositReqDto:" + withdrawDepositReqDto);
				// 访问接口获取数据
				BaseResMessage<QkWithdrawResDto> result = merchQrCodePayFeignClient.hsyWithdraw(withdrawDepositReqDto);
				// 8、验证相应结果
				String code = result.getCode();
				String message = result.getMessage();
				QkWithdrawResDto resDto = new QkWithdrawResDto();
				if (QuickPayMessageCode.SUCCESS.getKey().equals(code)) {
					resDto = result.getData();
					// 9、进行数据加密
					String cipher = QktV3Util.encrypt(deviceDto.getClientPublicKey(), resDto);
					String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, message, cipher,
							getSignKey());

					resMsg = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE, message, cipher, signStr);
				} else {
					resMsg = new AppBaseResMessage(code, message);
					QktV3Util.signResMsg(resMsg, getSignKey());
				}
			} else {
				// 验签失败
				resMsg = new AppBaseResMessage(encrpyStr.getCode(), encrpyStr.getMessage());
				QktV3Util.signResMsg(resMsg, getSignKey());
			}
		} catch (Exception e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE, ServiceConstants.EXCEPTION_RES_MESSAGE);
			QktV3Util.signResMsg(resMsg, getSignKey());
		} finally {
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/withdrawDeposit response code:{},message:{}",
					resMsg.getCode(), resMsg.getMessage());
		}

		return resMsg;
	}

	/**
	 * 3.27、提现手续费计算接口
	 * 
	 * @param params
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/withdrawalFeeCalculation", method = RequestMethod.POST)
	public AppBaseResMessage withdrawalFeeCalculation(@RequestBody ReqParamsDto reqDto, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) throws BaseCoreException {
		LOGGER.info("AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/withdrawalFeeCalculation request Start！ ");
		LOGGER.info("base request params: deviceNo={} , sessionId={}", reqDto.getDeviceNo(), reqDto.getSessionId());

		AppBaseResMessage resMsg = null;
		try {

			// 1、校验会话SessionId
			if (StringUtils.isEmpty(reqDto.getSessionId())) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getKey(),
						ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			BaseResMessage<HsyMerchCacheSessionInfoDto> sessionInfo = appHsyMerchantClient
					.getHsyMerchSession(reqDto.getSessionId());

			if (sessionInfo.getData() == null) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
						ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 2、通过设备号查询公私钥
			BaseResMessage<DeviceDto> resDeviceDto = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex());
			DeviceDto deviceDto = resDeviceDto.getData();
			if (null == deviceDto) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),
						ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 3、校验用户令牌和签名
			resMsg = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, deviceDto);
			if(!StringUtils.equals(resMsg.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			} 
			// 获取私钥
			String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
					KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// 4、解密
			AppBaseResMessage encrpyStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);

			if (!StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),
						ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 解密成功
			if (StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {

				// 5、参数获取
				JSONObject qtkReqDto = null;
				try {
					qtkReqDto = JSONObject.parseObject(encrpyStr.getData());
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getKey(),
							ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer walletType = WebParamUtils.getIntegerValue(qtkReqDto.get("walletType"));
				String amount = QktV3Util.trimString(WebParamUtils.getStringValue(qtkReqDto.get("amount")));
				BigDecimal wdAmt = null;

				if (null == walletType || (WalletType.POS_D0_WALLET.getIndex() != walletType
						&& WalletType.POS_T1_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_D0_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_T1_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_D0_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_T1_WALLET.getIndex() != walletType)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "钱包类型填写有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				if (StringUtils.isBlank(amount)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额为空！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				try {
					int index = amount.indexOf(".");
					if (index <= 0 || amount.substring(index + 1).length() != 2) {
						resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额有误！");
						QktV3Util.signResMsg(resMsg, getSignKey());
						return resMsg;
					}
					BigDecimal wdAmount = new BigDecimal(amount);
					wdAmt = wdAmount.multiply(new BigDecimal(100));
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "提现金额有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				HsyMerchCacheSessionInfoDto merchCacheSessionInfoDto = sessionInfo.getData();
				if (null == merchCacheSessionInfoDto || null == merchCacheSessionInfoDto.getQkUserDto()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
							ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				Integer checkStatus = merchCacheSessionInfoDto.getQkUserDto().getCheckStatus();
				if (checkStatus == CheckStatus.CHECK_NOT_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (checkStatus == CheckStatus.CHECK_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer isNeedInfoSupply = merchCacheSessionInfoDto.getQkUserDto().getQkUserStatusDto()
						.getIsNeedInfoSupply();
				if (YesOrNoStatus.YES.getIndex() == isNeedInfoSupply) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getKey(),
							ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				UUID uuid = merchCacheSessionInfoDto.getQkUserDto().getAccountUuid();
				if (null == uuid) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "账户不存在！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String accUuid = uuid.toString();

				// 构建请求参数
				WithdrawDepositFeeDto withdrawDepositReqDto = new WithdrawDepositFeeDto();
				withdrawDepositReqDto.setAccountUuid(accUuid);
				withdrawDepositReqDto.setAmount(wdAmt);
				withdrawDepositReqDto.setWalletType(walletType);

				LOGGER.info("wallet/withdrawalFeeCalculation request params withdrawDepositReqDto:" + withdrawDepositReqDto);
				BaseResMessage<WithdrawDepositFeeDto> result = walletFeignClient
						.withdrawDepositFeeCalculation(withdrawDepositReqDto, "");

				// 8、验证相应结果
				String code = result.getCode();
				String message = result.getMessage();
				if (ServiceConstants.RES_SUCCESS_CODE.equals(code)) {
					// 响应数据处理
					WithdrawDepositFeeDto withdrawDepositInfo = result.getData();
					WithdrawDepositFeeVo withdrawalFee = new WithdrawDepositFeeVo();
					withdrawalFee.setAmount(amount);
					withdrawalFee.setFeeAmount(withdrawDepositInfo.getFeeAmount().toString());
					LOGGER.info("wallet/withdrawalFeeCalculation result:" + JSONObject.toJSONString(withdrawalFee));
					// 9、进行数据加密
					String cipher = QktV3Util.encrypt(deviceDto.getClientPublicKey(), withdrawalFee);
					String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, message, cipher,
							getSignKey());

					resMsg = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE, message, cipher, signStr);
				} else {
					resMsg = new AppBaseResMessage(code, message);
					QktV3Util.signResMsg(resMsg, getSignKey());
				}
			} else {
				// 验签失败
				resMsg = new AppBaseResMessage(encrpyStr.getCode(), encrpyStr.getMessage());
				QktV3Util.signResMsg(resMsg, getSignKey());
			}
		} catch (BaseCoreException e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(e.getCode(), e.getMessage());
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} catch (Exception e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE, ServiceConstants.EXCEPTION_RES_MESSAGE);
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} finally {
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/withdrawalFeeCalculation response code:{},message:{}",
					resMsg.getCode(), resMsg.getMessage());
		}
		return resMsg;
	}

	/**
	 * 3.28、提现限制查询接口
	 * 
	 * @param params
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositLimit", method = RequestMethod.POST)
	public AppBaseResMessage queryWithdrawDepositLimit(@RequestBody ReqParamsDto reqDto, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) throws BaseCoreException {
		LOGGER.info("AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositLimit request Start！ ");
		LOGGER.info("base request params: deviceNo={} , sessionId={}", reqDto.getDeviceNo(), reqDto.getSessionId());

		AppBaseResMessage resMsg = null;
		try {
			// 1、校验会话SessionId
			if (StringUtils.isEmpty(reqDto.getSessionId())) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getKey(),
						ApiExceptionEnums.SESSIONID_IS_NOT_NULL.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			BaseResMessage<HsyMerchCacheSessionInfoDto> sessionInfo = appHsyMerchantClient
					.getHsyMerchSession(reqDto.getSessionId());

			if (sessionInfo.getData() == null) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
						ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 2、通过设备号查询公私钥
			BaseResMessage<DeviceDto> resDeviceDto = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex());
			DeviceDto deviceDto = resDeviceDto.getData();
			if (null == deviceDto) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),
						ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 3、校验用户令牌和签名
			resMsg = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, deviceDto);
			if(!StringUtils.equals(resMsg.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			} 
			// 获取私钥
			String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
					KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// 4、解密
			AppBaseResMessage encrpyStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);

			if (!StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),
						ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 解密成功
			if (StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {

				// 5、参数获取
				JSONObject qtkReqDto = null;
				try {
					qtkReqDto = JSONObject.parseObject(encrpyStr.getData());
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getKey(),
							ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer walletType = WebParamUtils.getIntegerValue(qtkReqDto.get("walletType"));

				if (null == walletType || (WalletType.POS_D0_WALLET.getIndex() != walletType
						&& WalletType.POS_T1_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_D0_WALLET.getIndex() != walletType
						&& WalletType.QR_CODE_T1_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_D0_WALLET.getIndex() != walletType
						&& WalletType.QUICK_PAY_T1_WALLET.getIndex() != walletType)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "钱包类型填写有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				HsyMerchCacheSessionInfoDto merchCacheSessionInfoDto = sessionInfo.getData();
				Integer checkStatus = merchCacheSessionInfoDto.getQkUserDto().getCheckStatus();
				if (checkStatus == CheckStatus.CHECK_NOT_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (checkStatus == CheckStatus.CHECK_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer isNeedInfoSupply = merchCacheSessionInfoDto.getQkUserDto().getQkUserStatusDto()
						.getIsNeedInfoSupply();
				if (YesOrNoStatus.YES.getIndex() == isNeedInfoSupply) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getKey(),
							ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				UUID uuid = merchCacheSessionInfoDto.getQkUserDto().getAccountUuid();
				if (null == uuid) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "账户不存在！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String accUuid = uuid.toString();
				// 构建请求参数
				WithdrawDepositReqDto withdrawDepositReqDto = new WithdrawDepositReqDto();
				withdrawDepositReqDto.setAccountUuid(accUuid);
				withdrawDepositReqDto.setWalletType(walletType);

				LOGGER.info("wallet/queryWithdrawDepositLimit request params withdrawDepositReqDto:" + withdrawDepositReqDto);
				// 访问接口获取数据
				BaseResMessage<WalletWithdrawDepositLimitDto> result = walletFeignClient
						.getWithdrawDepositLimit(withdrawDepositReqDto, "");
				// 验证相应结果
				String code = result.getCode();
				String message = result.getMessage();
				if (ServiceConstants.RES_SUCCESS_CODE.equals(code)) {
					// 响应数据处理
					WalletWithdrawDepositLimitDto withdrawDepositLimitInfo = result.getData();
					MerchWalletWithdrawLimitVo wdLimitVo = new MerchWalletWithdrawLimitVo();
					wdLimitVo.setTotalAmount(withdrawDepositLimitInfo.getAvailableAmount());
					wdLimitVo.setAvailableAmount(withdrawDepositLimitInfo.getWithdrawAvailableAmount());
					wdLimitVo.setMaxWithdrawDepositAmount(withdrawDepositLimitInfo.getMaxWithdrawDepositAmount());
					wdLimitVo.setMinWithdrawDepositAmount(withdrawDepositLimitInfo.getMinWithdrawDepositAmount());
					
				LOGGER.info("wallet/queryWithdrawDepositLimit result:" + JSONObject.toJSONString(wdLimitVo));

					// 9、进行数据加密
					String cipher = QktV3Util.encrypt(deviceDto.getClientPublicKey(), wdLimitVo);
					String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, message, cipher,
							getSignKey());

					resMsg = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE, message, cipher, signStr);
				} else {
					resMsg = new AppBaseResMessage(code, message);
					QktV3Util.signResMsg(resMsg, getSignKey());
				}
			} else {
				// 验签失败
				resMsg = new AppBaseResMessage(encrpyStr.getCode(), encrpyStr.getMessage());
				QktV3Util.signResMsg(resMsg, getSignKey());
			}
		} catch (BaseCoreException e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(e.getCode(), e.getMessage());
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} catch (Exception e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE, ServiceConstants.EXCEPTION_RES_MESSAGE);
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} finally {
			LOGGER.info( "AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositLimit response code:{},message:{}",
					resMsg.getCode(), resMsg.getMessage());
		}
		return resMsg;
	}

	/**
	 * 3.29、钱包流水接口查询
	 * 
	 * @param params
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/queryWalletFlow", method = RequestMethod.POST)
	public AppBaseResMessage queryWalletFlow(@RequestBody ReqParamsDto reqDto, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) throws BaseCoreException {
		LOGGER.info("AppHsyMerchantRefController /hsy/v2/appHsyMerchant/wallet/queryWalletFlow request Start！ ");
		LOGGER.info("base request params: deviceNo={} , sessionId={} ", reqDto.getDeviceNo(), reqDto.getSessionId());

		AppBaseResMessage resMsg = null;
		try {

			// 1、校验会话SessionId
			if (StringUtils.isEmpty(reqDto.getSessionId())) {
				resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "用户会话信息为空！");
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			BaseResMessage<HsyMerchCacheSessionInfoDto> sessionInfo = appHsyMerchantClient
					.getHsyMerchSession(reqDto.getSessionId());

			if (sessionInfo.getData() == null) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),
						ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 2、通过设备号查询公私钥
			BaseResMessage<DeviceDto> resDeviceDto = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex());
			DeviceDto deviceDto = resDeviceDto.getData();
			if (null == deviceDto) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),
						ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}
			// 3、校验用户令牌和签名
			resMsg = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, deviceDto);
			if(!StringUtils.equals(resMsg.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			} 
			// 获取私钥
			String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
					KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// 4、解密
			AppBaseResMessage encrpyStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);

			if (!StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				resMsg = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),
						ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(resMsg, getSignKey());
				return resMsg;
			}

			// 解密成功
			if (StringUtils.equals(encrpyStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)) {
				// 参数获取
				JSONObject qtkReqDto = null;
				try {
					qtkReqDto = JSONObject.parseObject(encrpyStr.getData());
				} catch (Exception e) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getKey(),
							ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer walletFlowOrigin = WebParamUtils.getIntegerValue(qtkReqDto.get("walletFlowOrigin"));
				Integer walletFlowType = WebParamUtils.getIntegerValue(qtkReqDto.get("walletFlowType"));
				String walletFlowStartTime = QktV3Util
						.trimString(WebParamUtils.getStringValue(qtkReqDto.get("walletFlowStartTime")));
				String walletFlowEndTime = QktV3Util
						.trimString(WebParamUtils.getStringValue(qtkReqDto.get("walletFlowEndTime")));
				Integer pageNum = WebParamUtils.getIntegerValue(qtkReqDto.get("pageNum"));
				Integer pageSize = WebParamUtils.getIntegerValue(qtkReqDto.get("pageSize"));

				if (null == walletFlowOrigin || (0 != walletFlowOrigin && 1 != walletFlowOrigin && 2 != walletFlowOrigin && 3 != walletFlowOrigin)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "钱包流水来源填写有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (null == walletFlowType || (0 != walletFlowType && 1 != walletFlowType && 2 != walletFlowType)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "钱包流水类型填写有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (StringUtils.isBlank(walletFlowStartTime)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "流水开始日期条件为空！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (StringUtils.isBlank(walletFlowEndTime)) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "流水结束日期条件为空！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String eL = "[0-9]{4}-[0-9]{2}-[0-9]{2}";
				Pattern p = Pattern.compile(eL);
				if (!p.matcher(walletFlowStartTime).matches()) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "流水开始日期条件格式有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (!p.matcher(walletFlowEndTime).matches()) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "流水结束日期条件格式有误！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}

				HsyMerchCacheSessionInfoDto merchCacheSessionInfoDto = sessionInfo.getData();

				Integer checkStatus = merchCacheSessionInfoDto.getQkUserDto().getCheckStatus();
				if (checkStatus == CheckStatus.CHECK_NOT_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_FAILED_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				if (checkStatus == CheckStatus.CHECK_PASS.getIndex()) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getKey(),
							ApiExceptionEnums.AUTH_STATUS_IS_IN_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				Integer isNeedInfoSupply = merchCacheSessionInfoDto.getQkUserDto().getQkUserStatusDto()
						.getIsNeedInfoSupply();
				if (YesOrNoStatus.YES.getIndex() == isNeedInfoSupply) {
					resMsg = new AppBaseResMessage(ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getKey(),
							ApiExceptionEnums.IS_NEED_INFO_SUPPLY_ERROR.getValue());
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				UUID uuid = merchCacheSessionInfoDto.getQkUserDto().getAccountUuid();
				if (null == uuid) {
					resMsg = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "账户不存在！");
					QktV3Util.signResMsg(resMsg, getSignKey());
					return resMsg;
				}
				String accUuid = uuid.toString();

				// 设置默认页面、每页展示条数
				if (null == pageNum)
					pageNum = 1;
				if (null == pageSize)
					pageSize = 5;

				LOGGER.info("wallet/queryWalletFlow request params accUuid:{},walletFlowOrigin:{}, walletFlowType:{}, walletFlowStartTime:{}, walletFlowEndTime:{}, pageNum:{}, pageSize:{}",
						accUuid, walletFlowOrigin, walletFlowType, walletFlowStartTime, walletFlowEndTime, pageNum, pageSize);
				
				// 访问接口获取数据
				BaseResMessage<PageInfo<WalletFlowDto>> result = walletFeignClient.getWalletFlow(accUuid, walletFlowOrigin, walletFlowType, walletFlowStartTime,
						walletFlowEndTime, pageNum, pageSize, "");

				// 8、验证相应结果
				String code = result.getCode();
				String message = result.getMessage();
				List<MerchWalletFlowVo> walletFlowList = new ArrayList<>();
				if (ServiceConstants.RES_SUCCESS_CODE.equals(code)) {
					List<WalletFlowDto> walletFlowDtoList = result.getData().getList();
					for (WalletFlowDto walletFlowDto : walletFlowDtoList) {
						MerchWalletFlowVo wtFlowVo = new MerchWalletFlowVo();
						wtFlowVo.setWalletFlowUuid(walletFlowDto.getWalletFlowUuid());
						wtFlowVo.setSourceAccountWalletType(walletFlowDto.getSourceAccountWalletType());
						wtFlowVo.setTargetAccountWalletType(walletFlowDto.getTargetAccountWalletType());
						if (null != walletFlowDto.getFlowAmount())
							wtFlowVo.setFlowAmount(Float.toString(walletFlowDto.getFlowAmount().floatValue()));
						if (null != walletFlowDto.getSourceWalletBalance())
							wtFlowVo.setSourceWalletBalance(
									Float.toString(walletFlowDto.getSourceWalletBalance().floatValue()));
						if (null != walletFlowDto.getTargetWalletBalance())
							wtFlowVo.setTargetWalletBalance(
									Float.toString(walletFlowDto.getTargetWalletBalance().floatValue()));
						wtFlowVo.setDebitType(walletFlowDto.getDebitType());
						wtFlowVo.setPostType(walletFlowDto.getPostType());
						wtFlowVo.setWalletFlowNo(walletFlowDto.getWalletFlowNo());
						wtFlowVo.setCreateTime(walletFlowDto.getCreateTime());

						walletFlowList.add(wtFlowVo);
					}

					MerchWalletWithdrawRecordVo withdrawRecordVo = new MerchWalletWithdrawRecordVo();
					withdrawRecordVo.setPages(result.getData().getPages());
					withdrawRecordVo.setWithdrawRecordList(walletFlowList);
					
//					LOGGER.info("wallet/queryWalletFlow result walletFlowList :" + walletFlowList);

					// 9、进行数据加密
					String cipher = QktV3Util.encrypt(deviceDto.getClientPublicKey(), withdrawRecordVo);
					String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, message, cipher,
							getSignKey());

					resMsg = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE, message, cipher, signStr);
				} else {
					resMsg = new AppBaseResMessage(code, message);
					QktV3Util.signResMsg(resMsg, getSignKey());
				}
			} else {
				// 验签失败
				resMsg = new AppBaseResMessage(encrpyStr.getCode(), encrpyStr.getMessage());
				QktV3Util.signResMsg(resMsg, getSignKey());
			}
		} catch (BaseCoreException e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(e.getCode(), e.getMessage());
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} catch (Exception e) {
			exceptionLogUtil.error(LOGGER, e);
			resMsg = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE, ServiceConstants.EXCEPTION_RES_MESSAGE);
			QktV3Util.signResMsg(resMsg, getSignKey());
			return resMsg;
		} finally {
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/queryWalletFlow response code:{},message:{}",
					resMsg.getCode(), resMsg.getMessage());
		}
		return resMsg;
	}

	/**
	 * 创建请求流水号
	 * 
	 * @param merchantCode
	 * @return
	 */
	private final String createReqFlow(String merchantCode) {
		String uuidStr = UUID.randomUUID().toString();
		uuidStr = uuidStr.replace("-", "");
		return uuidStr;
	}

	/**
	 * 获取签名秘钥
	 * 
	 * @return
	 * @throws BaseCoreException
	 */
	private String getSignKey() throws BaseCoreException {
		// 获取私钥
		String privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(),
				KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
		return privateKey;
	}
	
	/**
	 * 店小友 - 提现记录查询接口
	 */
	@RequestMapping(value = "/hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositRecord", method = RequestMethod.POST)
	public AppBaseResMessage queryWithdrawDepositRecord(@RequestBody ReqParamsDto reqDto, HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		LOGGER.info("MerchWalletRefController /hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositRecord request Start！ ");
		LOGGER.info("base request params: deviceNo={},sessionId={} , token={}",reqDto.getDeviceNo(),reqDto.getSessionId(),reqDto.getToken());
		AppBaseResMessage res = null;
		String privateKey = null;
		try{
			// ================================================= defense code ==================================================== //
			privateKey = keyService.getKey(config.getQktAppPlatformNo(), KeyBusinessType.DATA_KEY.getIndex(), KeyEncryptionType.RSA_PRIVATE_KEY.getIndex());
			// ================================================= 1. deviceNo  ==================================================== //
			DeviceDto keyOfDevice = permissionFeignClient.getKeyByDeviceNo(reqDto.getDeviceNo(),ApplicationType.HAO_SHOU_YIN.getIndex()).getData();
			if(null == keyOfDevice){
				res = new AppBaseResMessage(ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getKey(),ApiExceptionEnums.DEVICE_NO_NOT_EXIST.getValue());
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 2. sign  ========================================================= //
			if(StringUtils.isEmpty(reqDto.getSign())){
				res = new AppBaseResMessage(ApiExceptionEnums.SIGN_IS_NULL.getKey(),ApiExceptionEnums.SIGN_IS_NULL.getValue());
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 3. token  ========================================================= //
			res = qktTokenAndSignUtil.checkSignAndRSAEncrypt(reqDto, keyOfDevice);
			if(!StringUtils.equals(res.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 4. decrypt ========================================================= //
			AppBaseResMessage encryotStr = qktTokenAndSignUtil.checkRSAEncrypt(reqDto, privateKey);
			if(!StringUtils.equals(encryotStr.getCode(), ServiceConstants.RES_SUCCESS_CODE)){
				res = new AppBaseResMessage(ApiExceptionEnums.DECRYPT_FAIL_ERROR.getKey(),ApiExceptionEnums.DECRYPT_FAIL_ERROR.getValue());
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 5. session ========================================================= //
			HsyMerchCacheSessionInfoDto hsyMerchSession = appHsyMerchantClient.getHsyMerchSession(reqDto.getSessionId()).getData();
			if(null == hsyMerchSession || null == hsyMerchSession.getQkUserDto()){
				res = new AppBaseResMessage(ApiExceptionEnums.TOKEN_TIMEOUT.getKey(),ApiExceptionEnums.TOKEN_TIMEOUT.getValue());
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 6. merchant uuid =================================================== //
			String merchantNo = hsyMerchSession.getQkUserDto().getMerchantNo();
			UUID uuid = hsyMerchSession.getQkUserDto().getAccountUuid();
			if(null == uuid){
				res = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(),"用户信息缺失！");
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= 7. parse params ========================================= //
			JSONObject rowReqDto = null;
			try{
				rowReqDto = JSONObject.parseObject(encryotStr.getData());
			}catch(Exception e){
				res = new AppBaseResMessage(ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getKey(),ApiExceptionEnums.QKT_REQ_DATA_NOT_JSONSTRING.getValue());
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= request defense =========================================================== //
			String recordStartTime = HsyV2Util.trimString(WebParamUtils.getStringValue(rowReqDto.get("startTime")));
			String recordEndTime = HsyV2Util.trimString(WebParamUtils.getStringValue(rowReqDto.get("endTime")));
			Integer pageNum = WebParamUtils.getIntegerValue(rowReqDto.get("pageNum"));
			Integer pageSize = WebParamUtils.getIntegerValue(rowReqDto.get("pageSize"));
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositRecord execute start,recordStartTime:{},recordEndTime:{},pageNum:{},pageSize:{}",
					recordStartTime,recordEndTime,pageNum+"",pageSize+"");
			
			if (StringUtils.isBlank(recordStartTime)) {
				res = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "开始日期条件为空！");
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			if (StringUtils.isBlank(recordEndTime)) {
				res = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "结束日期条件为空！");
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			String eL = "[0-9]{4}-[0-9]{2}-[0-9]{2}";
			Pattern p = Pattern.compile(eL);
			if (!p.matcher(recordStartTime).matches()) {
				res = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "开始日期条件格式有误！");
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			if (!p.matcher(recordEndTime).matches()) {
				res = new AppBaseResMessage(QuickPayMessageCode.E100002.getKey(), "结束日期条件格式有误！");
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			if (null == pageNum)
				pageNum = 1;
			if (null == pageSize)
				pageSize = 5;
			
			// ================================================= request ======================================================== //
			QkQueryMerWithdrawRecordReqDto reqParams = new QkQueryMerWithdrawRecordReqDto();
			reqParams.setMerchantNo(merchantNo);
			reqParams.setPageNum(pageNum);
			reqParams.setPageSize(pageSize);
			reqParams.setRecordStartTime(recordStartTime);
			reqParams.setRecordEndTime(recordEndTime);
			
			BaseResMessage<PageInfo<QkQueryMerWithdrawRecordResDto>> respData = appHsyMerchantClient.queryWithdrawRecord(reqParams);
			
			// ================================================= response defense =============================================== //
			if(!ServiceConstants.RES_SUCCESS_CODE.equals(respData.getCode())){
				res = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE,ServiceConstants.EXCEPTION_RES_MESSAGE);
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			if(null == respData.getData()){
				res = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE,ServiceConstants.RES_SUCCESS_MESSAGE);
				QktV3Util.signResMsg(res, privateKey);
				return res;
			}
			
			// ================================================= response ======================================================== //
			HsyMerchantWithdrawRecordVo withdrawRecordVo = new HsyMerchantWithdrawRecordVo();
			withdrawRecordVo.setPages(respData.getData().getPages());
			withdrawRecordVo.setWithdrawRecord(respData.getData().getList());
			
			String msg = respData.getMessage();
			// 加密和签名返回数据
			String cipher = QktV3Util.encrypt(keyOfDevice.getClientPublicKey(), withdrawRecordVo);
			String signStr = QktV3Util.signResp(ServiceConstants.RES_SUCCESS_CODE, msg, cipher, privateKey);
			res = new AppBaseResMessage(ServiceConstants.RES_SUCCESS_CODE,msg,cipher,signStr);
		}catch(Exception e){
			exceptionLogUtil.error(LOGGER, e);
			res = new AppBaseResMessage(ServiceConstants.EXCEPTION_RES_CODE,ServiceConstants.EXCEPTION_RES_MESSAGE);
			return res;
		}finally{
			LOGGER.info("API /hsy/v2/appHsyMerchant/wallet/queryWithdrawDepositRecord response code:{},message:{}",res.getCode(),res.getMessage());
		}
		return res;
	}

	@Autowired
	private AppHsyMerchantClient appHsyMerchantClient;
	@Autowired
	private MerchQrCodePayFeignClient merchQrCodePayFeignClient;
	@Autowired
	private WalletFeignClient walletFeignClient;

	@Autowired
	private Config config;
	@Autowired
	private IKeyService keyService;

	@Autowired
	private ExceptionLogUtil exceptionLogUtil;
	@Autowired
	private QktTokenAndSignUtil qktTokenAndSignUtil;
	@Autowired
	private PermissionFeignClient permissionFeignClient;

	private static final Logger LOGGER = LoggerFactory.getLogger(MerchWalletRefController.class);

}
